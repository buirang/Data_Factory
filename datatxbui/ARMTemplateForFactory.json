{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "datatxbui"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().azureSQLdomainName};Initial Catalog=@{linkedService().DBName};User ID=@{linkedService().UserName};Password=@{linkedService().Password}"
		},
		"AzureSqlDatabase3_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase3'"
		},
		"WWI_DW_standard_Dynamic_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWI_DW_standard_Dynamic'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().AzureSQLdomainName};Initial Catalog=@{linkedService().DBName};User ID=@{linkedService().Username};Password=@{linkedService().Password}"
		},
		"WWI_Standard_Dynamic_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'WWI_Standard_Dynamic'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=@{linkedService().azureSQLdomainName};Initial Catalog=@{linkedService().DBName};User ID=@{linkedService().UserName};Password=@{linkedService().Password}"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://sqlvay2uvsbtmycakk.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "WWI_Std_sql",
								"type": "DatasetReference",
								"parameters": {
									"sourceSchema": {
										"value": "@pipeline().parameters.sourceSchema",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.TableName",
										"type": "Expression"
									},
									"azureSQLdomainName": {
										"value": "@pipeline().parameters.SourceSQLdomainName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.SourceDBName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.Sourceusername",
										"type": "Expression"
									},
									"Password": {
										"value": "@pipeline().parameters.Sourcepw",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "WWI_Std_sql",
								"type": "DatasetReference",
								"parameters": {
									"sourceSchema": {
										"value": "@pipeline().parameters.SinkSchema",
										"type": "Expression"
									},
									"TableName": {
										"value": "@pipeline().parameters.SinkTablename",
										"type": "Expression"
									},
									"azureSQLdomainName": {
										"value": "@pipeline().parameters.SinkDomainName",
										"type": "Expression"
									},
									"DBName": {
										"value": "@pipeline().parameters.SinkDBName",
										"type": "Expression"
									},
									"UserName": {
										"value": "@pipeline().parameters.Sinkusername",
										"type": "Expression"
									},
									"Password": {
										"value": "@pipeline().parameters.Sinkpw",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceSchema": {
						"type": "string"
					},
					"TableName": {
						"type": "string"
					},
					"SinkSchema": {
						"type": "string"
					},
					"SinkTablename": {
						"type": "string"
					},
					"SourceSQLdomainName": {
						"type": "string"
					},
					"SourceDBName": {
						"type": "string"
					},
					"Sourceusername": {
						"type": "string"
					},
					"Sourcepw": {
						"type": "string"
					},
					"SinkDomainName": {
						"type": "string"
					},
					"SinkDBName": {
						"type": "string"
					},
					"Sinkusername": {
						"type": "string"
					},
					"Sinkpw": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Std_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_Loading')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupOldWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkDatatset",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMarkActivity",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select MAX(LastModifytime) as NewWatermarkvalue from data_source_table",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IncrementalCopyActivity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupOldWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMarkActivity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from data_source_table where LastModifytime > '@{activity('LookupOldWaterMarkActivity').output.firstRow.WatermarkValue}' and LastModifytime <= '@{activity('LookupNewWaterMarkActivity').output.firstRow.NewWatermarkvalue}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "StoredProceduretoWriteWatermarkActivity",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"schema": "Application",
									"table": "People"
								},
								"destination": {
									"fileName": "people.txt"
								}
							},
							{
								"source": {
									"schema": "Sales",
									"table": "Customers"
								},
								"destination": {
									"fileName": "customers.txt"
								}
							},
							{
								"source": {
									"schema": "Sales",
									"table": "Invoices"
								},
								"destination": {
									"fileName": "invoices.txt"
								}
							},
							{
								"source": {
									"schema": "Sales",
									"table": "OrderLines"
								},
								"destination": {
									"fileName": "orderlines.txt"
								}
							},
							{
								"source": {
									"schema": "Sales",
									"table": "Orders"
								},
								"destination": {
									"fileName": "orders.txt"
								}
							},
							{
								"source": {
									"schema": "Warehouse",
									"table": "PackageTypes"
								},
								"destination": {
									"fileName": "packagetypes.txt"
								}
							},
							{
								"source": {
									"schema": "Warehouse",
									"table": "StockItems"
								},
								"destination": {
									"fileName": "stockIitems.txt"
								}
							}
						]
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkDatatset')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Dynamic_pipeline_Target",
								"type": "DatasetReference",
								"parameters": {
									"TargetSchema": "dbo",
									"Target_tablename": "orders"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For Each File Name",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 1,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "WWI_Std_sql",
											"type": "DatasetReference",
											"parameters": {
												"sourceSchema": {
													"value": "@pipeline().parameters.sourceShema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.sourceTableName",
													"type": "Expression"
												},
												"azureSQLdomainName": "mysqlservertxbui.database.windows.net",
												"DBName": "WideWorldImporters-Standard",
												"UserName": "azureuser",
												"Password": "Thithuy1!"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "WWI_Std_sql",
											"type": "DatasetReference",
											"parameters": {
												"sourceSchema": {
													"value": "@pipeline().parameters.SinkSchema",
													"type": "Expression"
												},
												"TableName": {
													"value": "@pipeline().parameters.SinkTablename",
													"type": "Expression"
												},
												"azureSQLdomainName": "mysqlservertxbui.database.windows.net",
												"DBName": "WideWorldImporters-Standard",
												"UserName": "azureuser",
												"Password": "Thithuy1!"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"sourceShema": {
						"type": "string",
						"defaultValue": "sales"
					},
					"sourceTableName": {
						"type": "string",
						"defaultValue": "orders"
					},
					"SinkSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"SinkTableName": {
						"type": "string",
						"defaultValue": "orders"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Dynamic_pipeline_Target')]",
				"[concat(variables('factoryId'), '/datasets/WWI_Std_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PersonID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Name",
						"type": "varchar"
					},
					{
						"name": "LastModifytime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "data_source_table"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWI_DW_standard_Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"AzureSQLdomainName": "mysqlservertxbui.database.windows.net",
						"DBName": "WideWorldImportersDW-Standard",
						"Username": "azureuser",
						"Password": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "Dimension",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWI_DW_standard_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWI_DW_standard_Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"AzureSQLdomainName": "mysqlservertxbui.database.windows.net",
						"DBName": "WideWorldImportersDW-Standard",
						"Username": "azureuser",
						"Password": "Thithuy1!"
					}
				},
				"parameters": {
					"Table": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Employee Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WWI Employee ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Employee",
						"type": "nvarchar"
					},
					{
						"name": "Preferred Name",
						"type": "nvarchar"
					},
					{
						"name": "Is Salesperson",
						"type": "bit"
					},
					{
						"name": "Photo",
						"type": "varbinary"
					},
					{
						"name": "Valid From",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Valid To",
						"type": "datetime2",
						"scale": 7
					},
					{
						"name": "Lineage Key",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "Dimension",
					"table": {
						"value": "@dataset().Table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWI_DW_standard_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DimentionTableDW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference",
					"parameters": {
						"azureSQLdomainName": "mysqlservertxbui.database.windows.net",
						"DBName": "WideWorldImportersDW-Standard",
						"UserName": "azureuser",
						"Password": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dimension",
					"table": "customer"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Dynamic_pipeline_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWI_Standard_Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"azureSQLdomainName": "mysqlservertxbui.database.windows.net",
						"DBName": "WideWorldImporters-Standard",
						"UserName": "azureuser",
						"Password": "Thithuy1!"
					}
				},
				"parameters": {
					"TargetSchema": {
						"type": "String"
					},
					"Target_tablename": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().TargetSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Target_tablename",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWI_Standard_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdatedCustomer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UpdatedCustomer.txt",
						"container": "newdata"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_Std_sql')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "WWI_Standard_Dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"azureSQLdomainName": {
							"value": "@dataset().azureSQLdomainName",
							"type": "Expression"
						},
						"DBName": {
							"value": "@dataset().DBName",
							"type": "Expression"
						},
						"UserName": {
							"value": "@dataset().UserName",
							"type": "Expression"
						},
						"Password": {
							"value": "@dataset().Password",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"sourceSchema": {
						"type": "String"
					},
					"TableName": {
						"type": "String"
					},
					"azureSQLdomainName": {
						"type": "string",
						"defaultValue": "mysqlservertxbui.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "WideWorldImporters-Standard"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azureuser"
					},
					"Password": {
						"type": "string",
						"defaultValue": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().sourceSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/WWI_Standard_Dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkDatatset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "watermarktable"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"azureSQLdomainName": {
						"type": "string",
						"defaultValue": "mysqlservertxbui.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "WideWorldImportersDW-Standard"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azureuser"
					},
					"Password": {
						"type": "string",
						"defaultValue": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase3')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase3_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_DW_standard_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"AzureSQLdomainName": {
						"type": "string",
						"defaultValue": "mysqlservertxbui.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "WideWorldImportersDW-Standard"
					},
					"Username": {
						"type": "string",
						"defaultValue": "azureuser"
					},
					"Password": {
						"type": "string",
						"defaultValue": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWI_DW_standard_Dynamic_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/WWI_Standard_Dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Dynamic for Sql Azure WWI",
				"parameters": {
					"azureSQLdomainName": {
						"type": "string",
						"defaultValue": "mysqlservertxbui.database.windows.net"
					},
					"DBName": {
						"type": "string",
						"defaultValue": "WideWorldImporters-Standard"
					},
					"UserName": {
						"type": "string",
						"defaultValue": "azureuser"
					},
					"Password": {
						"type": "string",
						"defaultValue": "Thithuy1!"
					}
				},
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('WWI_Standard_Dynamic_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OLTP-ODS-OLAP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "WWI_Std_sql",
								"type": "DatasetReference"
							},
							"name": "OLTP"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "ODStransfer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "ODS"
						},
						{
							"dataset": {
								"referenceName": "DimentionTableDW",
								"type": "DatasetReference"
							},
							"name": "DW"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OLTP",
						"source(output(",
						"          PersonID as integer,",
						"          Name as string,",
						"          LastModifytime as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ODStransfer",
						"OLTP sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PersonID as integer,",
						"          Name as string,",
						"          LastModifytime as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> ODS",
						"ODStransfer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> DW"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WWI_Std_sql')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/DimentionTableDW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Type2_flowchart')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "UpdatedCustomer",
								"type": "DatasetReference"
							},
							"name": "UpdatedCustomer"
						},
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "DimCustomer",
							"description": "Import data from DimCustomer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DimCustomer",
								"type": "DatasetReference"
							},
							"name": "FinalSCDtype2"
						}
					],
					"transformations": [
						{
							"name": "AddHashInput"
						},
						{
							"name": "FilterForActive"
						},
						{
							"name": "AddHashExiting",
							"description": "Creating/updating Id_hash, customer_hash"
						},
						{
							"name": "NewandUpdatedRow"
						},
						{
							"name": "AddKey1"
						},
						{
							"name": "JoinWithMaxSurrogateKey"
						},
						{
							"name": "AddingDimensionColumn"
						},
						{
							"name": "exists1"
						},
						{
							"name": "UpdateExist1"
						},
						{
							"name": "union1"
						},
						{
							"name": "DropUnwantedColumn"
						},
						{
							"name": "DropUnwanted2"
						},
						{
							"name": "RemoveColumns1",
							"description": "Autogenerated by data preview actions"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     PrimaryKey as string ('WWI Customer ID'),",
						"     Column as string ('Customer Key,CUstomer,Bill To Customer,Category,Buying Group,Primary Contact,Postal Code,Valid From,Valid To,Lineage')",
						"}",
						"source(output(",
						"          {Customer Key} as short,",
						"          {WWI Customer ID} as short,",
						"          CUstomer as string,",
						"          {Bill To Customer} as string,",
						"          Category as string,",
						"          {Buying Group} as string,",
						"          {Primary Contact} as string,",
						"          {Postal Code} as integer,",
						"          {Valid From} as string,",
						"          {Valid To} as string,",
						"          Lineage as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 10,",
						"     ignoreNoFilesFound: false,",
						"     partitionBy('hash', 1)) ~> UpdatedCustomer",
						"source(output(",
						"          {Customer Key} as integer,",
						"          {WWI Customer ID} as integer,",
						"          Customer as string,",
						"          {Bill To Customer} as string,",
						"          Category as string,",
						"          {Buying Group} as string,",
						"          {Primary Contact} as string,",
						"          {Postal Code} as string,",
						"          {Valid From} as timestamp,",
						"          {Valid To} as timestamp,",
						"          {Lineage Key} as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     inferDriftedColumnTypes: true,",
						"     batchSize: 10,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DimCustomer",
						"UpdatedCustomer derive(Id_hash = md5(byName($PrimaryKey)),",
						"          column_hash = md5(byNames(split($Column, ',')))) ~> AddHashInput",
						"DimCustomer filter(toInteger(byName('Lineage Key'))==2) ~> FilterForActive",
						"FilterForActive derive(Id_hash = md5(byNames(split($PrimaryKey,','))),",
						"          column_hash = md5(byNames(split($Column,','))),",
						"     partitionBy('hash', 1)) ~> AddHashExiting",
						"AddHashInput, AddHashExiting exists(AddHashInput@Id_hash == AddHashExiting@Id_hash",
						"     && AddHashInput@column_hash == AddHashExiting@column_hash,",
						"     negate:true,",
						"     broadcast: 'auto')~> NewandUpdatedRow",
						"NewandUpdatedRow keyGenerate(output(Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddKey1",
						"AddKey1, AddHashExiting join(UpdatedCustomer@{Customer Key} == DimCustomer@{Customer Key},",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinWithMaxSurrogateKey",
						"JoinWithMaxSurrogateKey derive(Active = 1,",
						"          {Active Start Time} = currentUTC(),",
						"     partitionBy('hash', 1)) ~> AddingDimensionColumn",
						"AddHashExiting, NewandUpdatedRow exists(DimCustomer@Customer == UpdatedCustomer@CUstomer,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"exists1 derive(Active = 0,",
						"          ActiveEndTime = currentUTC()) ~> UpdateExist1",
						"DropUnwantedColumn, UpdateExist1 union(byName: true)~> union1",
						"AddingDimensionColumn select(mapColumn(",
						"          {Customer Key} = UpdatedCustomer@{Customer Key},",
						"          {WWI Customer ID} = UpdatedCustomer@{WWI Customer ID},",
						"          CUstomer = UpdatedCustomer@CUstomer,",
						"          {Customer Key} = DimCustomer@{Customer Key},",
						"          Active,",
						"          {Active Start Time}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwantedColumn",
						"UpdateExist1 select(mapColumn(",
						"          {Customer Key},",
						"          {WWI Customer ID},",
						"          Active,",
						"          ActiveEndTime",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> DropUnwanted2",
						"union1 select(mapColumn(",
						"          {Customer Key},",
						"          {WWI Customer ID},",
						"          Active,",
						"          {Active Start Time},",
						"          ActiveEndTime,",
						"          DimCUstomer = union1@CUstomer",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveColumns1",
						"RemoveColumns1 alterRow(insertIf(true())) ~> AlterRow1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          {Employee Key} as integer,",
						"          {WWI Employee ID} as integer,",
						"          Employee as string,",
						"          {Preferred Name} as string,",
						"          {Is Salesperson} as boolean,",
						"          Photo as binary,",
						"          {Valid From} as timestamp,",
						"          {Valid To} as timestamp,",
						"          {Lineage Key} as integer",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:[($PrimaryKey)],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> FinalSCDtype2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/UpdatedCustomer')]",
				"[concat(variables('factoryId'), '/datasets/DimCustomer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD type 2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD_Type2_flowchart",
								"type": "DataFlowReference",
								"parameters": {
									"PrimaryKey": "'WWI Customer ID'",
									"Column": "'Customer Key,CUstomer,Bill To Customer,Category,Buying Group,Primary Contact,Postal Code,Valid From,Valid To,Lineage'"
								},
								"datasetParameters": {
									"UpdatedCustomer": {},
									"DimCustomer": {
										"Table": "Customer"
									},
									"FinalSCDtype2": {
										"Table": "Customer"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD_Type2_flowchart')]"
			]
		}
	]
}